import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import CustomTable from '../../components/CustomTable';
import { managersHeaders } from '../../mocks/managersInfo';
import { addManager, removeManager } from '../../store/managersSlice';

import './styles.css';

const ManagersPage = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const [showAddModal, setShowAddModal] = useState(false);
  const [cardNumber, setCardNumber] = useState('');
  const [newManager, setNewManager] = useState({
    name: '',
    surname: '',
    location: '',
    shift: '',
  });

  const managers = useSelector((state) => state.managers);
  const clients = useSelector((state) => state.clients);

  const columns = [
    ...managersHeaders.map((header) => ({
      key: header.key,
      title: header.label,
      className: 'text-left',
      cellClassName: 'text-left',
    })),
    {
      key: 'actions',
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      render: (row) => (
        <button className="remove-btn" onClick={() => dispatch(removeManager(row.id))}>
          üóë
        </button>
      ),
    },
  ];

  const handleAdd = () => {
    dispatch(addManager(newManager));
    setNewManager({ name: '', surname: '', location: '', shift: '' });
    setShowAddModal(false);
  };

  const handleFindCustomer = () => {
    const trimmedCard = cardNumber.trim();
    if (!trimmedCard) return;

    const foundClient = clients.find((client) =>
      client.cards.some((card) => card.cardNumber === trimmedCard),
    );

    if (foundClient) {
      navigate(`/customer/card/${trimmedCard}`);
    } else {
      alert('–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–æ–π –∫–∞—Ä—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  };

  return (
    <div className="managers-page">
      <div className="managers-header">
        <h2>–ú–µ–Ω–µ–¥–∂–µ—Ä—ã</h2>
      </div>

      <div className="managers-grid">
        <div className="manager-card create-card" onClick={() => setShowAddModal(true)}>
          <h3>–°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h3>
          <p>
            –°–æ–∑–¥–∞–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            —à—Ç–∞–º–ø–æ–≤. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Ç–æ—á–∫–∞–º –∏–ª–∏ –∂–µ –ø–æ —Å–º–µ–Ω–∞–º.
          </p>
          <span className="scanner-icon">üßë‚Äçüíº</span>
          <button className="btn-dark" onClick={() => setShowAddModal(true)}>
            –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
          </button>
        </div>
        <div className="manager-card search-card">
          <h3>–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ä—Ç–µ</h3>
          <p>
            –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—é. –£–¥–æ–±–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç
            –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è-—Å–∫–∞–Ω–µ—Ä–∞.
          </p>
          <span className="scanner-icon">üîé</span>
          <input
            type="text"
            placeholder="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
            value={cardNumber}
            className="location-modal-input"
            onChange={(e) => setCardNumber(e.target.value)}
          />
          <button className="btn-dark" onClick={handleFindCustomer}>
            –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
          </button>
        </div>

        <div className="manager-card scanner-card">
          <h3>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-—Å–∫–∞–Ω–µ—Ä</h3>
          <p>
            –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-—Å–∫–∞–Ω–µ—Ä –∫–∞—Ä—Ç —Å–≤–æ–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤ —Ç–æ—á–∫–∞—Ö –ø—Ä–æ–¥–∞–∂. –° –ø–æ–º–æ—â—å—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            –æ–Ω–∏ —Å–º–æ–≥—É—Ç –ø—Ä–æ–±–∏–≤–∞—Ç—å —à—Ç–∞–º–ø—ã –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –≤—ã–¥–∞–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã.
          </p>
          <span className="scanner-icon">üì∑</span>
          <button className="btn-dark" onClick={() => navigate('/scan')}>
            –û—Ç–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
      <div className="table-wrapper">
        <CustomTable columns={columns} rows={managers} />
      </div>
      {showAddModal && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h3>
            <input
              type="text"
              placeholder="–ò–º—è"
              value={newManager.name}
              onChange={(e) =>
                setNewManager((prev) => ({ ...prev, name: e.target.value }))
              }
            />
            <input
              type="text"
              placeholder="–§–∞–º–∏–ª–∏—è"
              value={newManager.surname}
              onChange={(e) =>
                setNewManager((prev) => ({ ...prev, surname: e.target.value }))
              }
            />
            <input
              type="text"
              placeholder="–õ–æ–∫–∞—Ü–∏—è"
              value={newManager.location}
              onChange={(e) =>
                setNewManager((prev) => ({ ...prev, location: e.target.value }))
              }
            />
            <input
              type="text"
              placeholder="–°–º–µ–Ω–∞"
              value={newManager.shift}
              onChange={(e) =>
                setNewManager((prev) => ({ ...prev, shift: e.target.value }))
              }
            />
            <div className="modal-buttons">
              <button
                className="btn btn-dark"
                onClick={handleAdd}
                disabled={
                  !newManager.name ||
                  !newManager.surname ||
                  !newManager.location ||
                  !newManager.shift
                }
              >
                –î–æ–±–∞–≤–∏—Ç—å
              </button>
              <button className="btn-light" onClick={() => setShowAddModal(false)}>
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

    </div>
  );
};

export default ManagersPage;
