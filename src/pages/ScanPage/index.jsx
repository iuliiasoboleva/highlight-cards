import React, { useEffect, useRef, useState } from 'react';
import { Html5Qrcode } from 'html5-qrcode';
import { useNavigate } from 'react-router-dom';
import './styles.css';

const ScanPage = () => {
  const scannerRef = useRef(null);
  const isScannerRunning = useRef(false);
  const navigate = useNavigate();

  const [message, setMessage] = useState('');
  const [status, setStatus] = useState('initializing');

  const handleScanSuccess = (decodedText) => {
    setMessage(`QR-–∫–æ–¥: ${decodedText}`);

    if (isScannerRunning.current && scannerRef.current) {
      scannerRef.current
        .stop()
        .then(() => {
          isScannerRunning.current = false;
          return scannerRef.current.clear();
        })
        .catch((err) => {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫–∞–Ω–µ—Ä–∞:', err);
        });
    }

    const user = findUserByQr(decodedText);
    if (user) {
      navigate(`/users/${user.id}`);
    } else {
      setMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  };

  const findUserByQr = (qrCode) => {
    const mockUsers = [
      { id: 1, qr: '123456' },
      { id: 2, qr: 'abcdef' },
    ];
    return mockUsers.find((u) => u.qr === qrCode);
  };

  useEffect(() => {
    const scanner = new Html5Qrcode('qr-reader');
    scannerRef.current = scanner;

    Html5Qrcode.getCameras()
      .then((devices) => {
        if (devices && devices.length) {
          const backCamera =
            devices.find((d) =>
              d.label.toLowerCase().includes('back') ||
              d.label.toLowerCase().includes('rear')
            ) || devices[0];

          const cameraId = backCamera.id;

          scanner
            .start(
              cameraId,
              { fps: 10, qrbox: 300 },
              handleScanSuccess,
              (errorMessage) => {
                console.log('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', errorMessage);
              }
            )
            .then(() => {
              isScannerRunning.current = true;
              setStatus('scanning');
            })
            .catch((err) => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–µ—Ä–∞:', err);
              setStatus('error');
            });
        } else {
          setStatus('no-camera');
        }
      })
      .catch((err) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–µ—Ä:', err);
        setStatus('error');
      });

    return () => {
      if (isScannerRunning.current && scannerRef.current) {
        scannerRef.current
          .stop()
          .then(() => {
            isScannerRunning.current = false;
            return scannerRef.current.clear();
          })
          .catch((err) => {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫–∞–Ω–µ—Ä–∞:', err);
          });
      }
    };
  }, []);

  return (
    <div className="scan-page">
      <header className="scan-header">
        <img src="/logoColored.png" alt="Logo" className="scan-logo" />
      </header>

      <main className="scan-main">
        <div className="scan-user">
          <p>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
        </div>

        {status === 'initializing' && (
          <div className="loader">
            <div className="spinner" />
            <p>üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã...</p>
          </div>
        )}

        {status === 'no-camera' && (
          <p className="scan-message">‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–µ–±-–∫–∞–º–µ—Ä—É.</p>
        )}

        {status === 'error' && (
          <p className="scan-message">‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–º–µ—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
        )}

        <div id="qr-reader" className="qr-reader" />

        {status === 'scanning' && (
          <p className="scan-message">üì∑ –ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç—É —Å QR-–∫–æ–¥–æ–º.</p>
        )}

        {message && <p className="scan-message result">{message}</p>}
      </main>
    </div>
  );
};

export default ScanPage;
