import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, useParams } from 'react-router-dom';

import { faCircleQuestion } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import CardInfo from '../../components/CardInfo';
import {
  updateBackground,
  updateColors,
  updateIcon,
  updateLogo,
} from '../../store/cardDesignSlice';

import './styles.css';

const EditDesign = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const designState = useSelector((state) => state.cardDesign);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 1024);
  const [activeTab, setActiveTab] = useState('description');

  const { logo, icon, background, colors } = designState;

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 1024);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const handleImageChange = (e, action) => {
    const file = e.target.files[0];
    if (file) {
      const imageUrl = URL.createObjectURL(file);
      dispatch(action(imageUrl));
    }
  };

  const handleColorChange = (key, value) => {
    const updatedColors = {
      ...colors,
      [key]: value,
    };
    dispatch(updateColors(updatedColors));
  };

  const handleSave = () => {
    navigate(`/cards/${id}/edit/info`);
  };

  const previewCardData = {
    id,
    title: '–ö–∞—Ä—Ç–∞',
    name: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞',
    status: 'stamp',
    cardImg: background || '/default-card-bg.png',
    pdfImg: '/default-qr.png',
    ...designState,
  };

  const designContent = (
    <div className="design-section">
      <h2>
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ <FontAwesomeIcon icon={faCircleQuestion} style={{ fontSize: 16 }} />
      </h2>
      <hr />
      <div className="design-row">
        <div className="upload-box">
          <label className="upload-label">–õ–æ–≥–æ—Ç–∏–ø</label>
          <div className="upload-area">
            {logo ? (
              <img src={logo} alt="logo" className="preview-img" />
            ) : (
              <div className="upload-placeholder">üìÅ</div>
            )}
            <input
              type="file"
              id="logo"
              hidden
              onChange={(e) => handleImageChange(e, updateLogo)}
            />
            <label htmlFor="logo" className="upload-button">
              –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
            </label>
          </div>
          <p className="upload-description">
            –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 480x150 –ø–∏–∫—Å–µ–ª–µ–π. –¢–æ–ª—å–∫–æ PNG. 3 –ú–ë
          </p>
        </div>

        <div className="upload-box">
          <label className="upload-label">–ò–∫–æ–Ω–∫–∞</label>
          <div className="upload-area">
            {icon ? (
              <img src={icon} alt="icon" className="preview-img" />
            ) : (
              <div className="upload-placeholder">üìÅ</div>
            )}
            <input
              type="file"
              id="icon"
              hidden
              onChange={(e) => handleImageChange(e, updateIcon)}
            />
            <label htmlFor="icon" className="upload-button">
              –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
            </label>
          </div>
          <p className="upload-description">
            –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 512x512 –ø–∏–∫—Å–µ–ª–µ–π. –¢–æ–ª—å–∫–æ PNG. 3 –ú–ë
          </p>
        </div>
      </div>

      <div className="upload-box full-width">
        <label className="upload-label">–§–æ–Ω —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏</label>
        <div className="upload-area">
          {background ? (
            <img src={background} alt="background" className="preview-img" />
          ) : (
            <div className="upload-placeholder">üìÅ</div>
          )}
          <input
            type="file"
            id="background"
            hidden
            onChange={(e) => handleImageChange(e, updateBackground)}
          />
          <label htmlFor="background" className="upload-button">
            –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
          </label>
        </div>
        <p className="upload-description">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 1125x432. –¢–æ–ª—å–∫–æ PNG. 3 –ú–ë</p>
      </div>

      <h3>–¶–≤–µ—Ç–∞</h3>
      <div className="color-section">
        <div className="color-input">
          <label>–§–æ–Ω –∫–∞—Ä—Ç—ã</label>
          <input
            type="color"
            value={colors.cardBackground}
            onChange={(e) => handleColorChange('cardBackground', e.target.value)}
          />
          <input type="text" value={colors.cardBackground} readOnly />
        </div>
        <div className="color-input">
          <label>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</label>
          <input
            type="color"
            value={colors.textColor}
            onChange={(e) => handleColorChange('textColor', e.target.value)}
          />
          <input type="text" value={colors.textColor} readOnly />
        </div>
        <div className="color-input full-width">
          <label>–¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏</label>
          <input
            type="color"
            value={colors.centerBackground}
            onChange={(e) => handleColorChange('centerBackground', e.target.value)}
          />
          <input type="text" value={colors.centerBackground} readOnly />
        </div>
      </div>

      <button onClick={handleSave} className="create-button">
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
      </button>
    </div>
  );

  const cardPreview = (
    <div className="type-card-image-container">
      <img className="card-image-add" src="/phone.svg" alt="preview" />
      <CardInfo card={previewCardData} />
    </div>
  );

  return (
    <div className="edit-type-main-container">
      {isMobile && (
        <div className="edit-type-tabs">
          <button
            className={`edit-type-tab ${activeTab === 'description' ? 'active' : ''}`}
            onClick={() => setActiveTab('description')}
          >
            –û–ø–∏—Å–∞–Ω–∏–µ
          </button>
          <button
            className={`edit-type-tab ${activeTab === 'card' ? 'active' : ''}`}
            onClick={() => setActiveTab('card')}
          >
            –ö–∞—Ä—Ç–∞
          </button>
        </div>
      )}

      {isMobile ? (
        <div className="edit-type-content">
          {activeTab === 'description' && <div className="edit-type-page">{designContent}</div>}
          {activeTab === 'card' && cardPreview}
        </div>
      ) : (
        <>
          <div className="edit-type-page">{designContent}</div>
          {cardPreview}
        </>
      )}
    </div>
  );
};

export default EditDesign;
