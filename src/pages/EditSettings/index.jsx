import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, useParams } from 'react-router-dom';

import { HelpCircle } from 'lucide-react';

import CardInfo from '../../components/CardInfo';
import CustomSelect from '../../components/CustomSelect';
import ToggleSwitch from '../../components/ToggleSwitch';
import {
  addIssueFormField,
  addStatusField,
  addUtmLink,
  removeIssueFormField,
  removeStatusField,
  removeUtmLink,
  togglePolicyField,
  toggleRequirePurchaseAmount,
  updateCurrentCard,
  updateInitialPointsOnIssue,
  updateIssueFormField,
  updateIssueLimit,
  updatePolicyTextField,
  updateStatusField,
} from '../../store/cardsSlice';
import CardIssueForm from './CardIssueForm';
import CardLimit from './CardLimit';
import CardStatusForm from './CardStatusForm';
import LocationModal from './LocationModal';
import PersonalDataPolicy from './PersonalDataPolicy';
import RadioConfigs from './RadioConfigs';
import UTMLinks from './UTMLinks';

import './styles.css';

const EditSettings = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const currentCard = useSelector((state) => state.cards.currentCard);
  const settings = currentCard.settings || {};
  const formFields = currentCard.issueFormFields;
  const utmLinks = currentCard.utmLinks;
  const limit = currentCard.issueLimit;
  const statusFields = currentCard.statusFields;
  const policySettings = currentCard.policySettings;
  const cardStatus = currentCard.status; // <=== –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç

  const [isMobile, setIsMobile] = useState(window.innerWidth <= 1024);
  const [activeTab, setActiveTab] = useState('description');
  const [showLocationModal, setShowLocationModal] = useState(false);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 1024);
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const handleSave = () => {
    if (policySettings.policyEnabled) {
      if (!policySettings.policyText.trim() || !policySettings.fullPolicyText.trim()) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
      }
    }
    navigate(`/cards/${id}/edit/design`);
  };

  const updateSettingsField = (field, value) => {
    dispatch(updateCurrentCard({ settings: { ...settings, [field]: value } }));
  };

  const handleAddLocation = (location) => {
    updateSettingsField('locations', [...(settings.locations || []), location]);
  };

  const handleRemoveLocation = (index) => {
    const updatedLocations = settings.locations.filter((_, i) => i !== index);
    updateSettingsField('locations', updatedLocations);
  };

  const settingsContent = (
    <div className="settings-inputs-container">
      <h2>
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ <HelpCircle size={16} />
      </h2>
      <hr />

      {/* üõ†Ô∏è –†–∞–¥–∏–æ-–±–ª–æ–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
      <RadioConfigs cardStatus={cardStatus} />

      {showLocationModal && (
        <LocationModal onClose={() => setShowLocationModal(false)} onSave={handleAddLocation} />
      )}

      <hr />
      {settings.locations.length === 0 ? (
        <div className="no-location-wrapper">
          –£ –≤–∞—Å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
          <button onClick={() => setShowLocationModal(true)}>–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é</button>
        </div>
      ) : (
        <>
          <h3 className="barcode-radio-title">–õ–æ–∫–∞—Ü–∏–∏</h3>
          <div className="locations-wrapper">
            {settings.locations.map((location, index) => (
              <div key={index} className="location-tag">
                {location.name}
                <button className="remove-btn" onClick={() => handleRemoveLocation(index)}>
                  √ó
                </button>
              </div>
            ))}
            <button className="add-btn" onClick={() => handleAddLocation()}>
              +
            </button>
            <button className="clear-btn" onClick={() => updateSettingsField('locations', [])}>
              √ó
            </button>
          </div>
        </>
      )}
      <hr />

      {/* –Ø–∑—ã–∫ */}
      <h3 className="barcode-radio-title">–Ø–∑—ã–∫ –∫–∞—Ä—Ç—ã</h3>
      <CustomSelect
        value={settings.language?.value || 'ru'}
        onChange={(value) => updateSettingsField('language', { ...settings.language, value })}
        options={[
          { value: 'ru', label: '–†—É—Å—Å–∫–∏–π (ru)' },
          { value: 'en', label: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (en)' },
        ]}
      />
      <hr />

      {/* –§–æ—Ä–º–∞ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã */}
      <h3 className="barcode-radio-title">–§–æ—Ä–º–∞ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã</h3>
      <CardIssueForm
        formFields={formFields}
        onFieldChange={(index, key, value) => dispatch(updateIssueFormField({ index, key, value }))}
        onAddField={() => dispatch(addIssueFormField())}
        onRemoveField={(index) => dispatch(removeIssueFormField(index))}
      />
      <hr />

      {/* UTM */}
      <h3 className="barcode-radio-title">UTM</h3>
      <UTMLinks
        utmLinks={utmLinks}
        onAddLink={(source) => dispatch(addUtmLink(source))}
        onRemoveLink={(index) => dispatch(removeUtmLink(index))}
      />
      <hr />

      {/* –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
      <h3 className="barcode-radio-title">–ú–∞—Å–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h3>
      <CustomSelect
        value={settings.phoneMask?.value || 'Russia'}
        onChange={(value) => updateSettingsField('phoneMask', { ...settings.phoneMask, value })}
        options={[
          { value: 'Russia', label: '–†–§ (+7)' },
          { value: 'UAE', label: '–û–ê–≠ (+971)' },
        ]}
      />
      <hr />

      {/* –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
      <PersonalDataPolicy
        settings={policySettings}
        onToggle={(key) => dispatch(togglePolicyField(key))}
        onTextChange={(key, value) => dispatch(updatePolicyTextField({ key, value }))}
      />
      <hr />

      {/* –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è */}
      <CardLimit
        value={limit}
        onChange={(value) => dispatch(updateIssueLimit(value))}
        title="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç"
        subtitle="0 ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
      />
      <hr />

      {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∏–ª–∏ —à—Ç–∞–º–ø–æ–≤ –ø—Ä–∏ –≤—ã–ø—É—Å–∫–µ */}
      {(cardStatus === 'cashback' || cardStatus === 'certificate') && (
        <CardLimit
          value={currentCard.initialPointsOnIssue}
          onChange={(value) => dispatch(updateInitialPointsOnIssue(value))}
          title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø—Ä–∏ –≤—ã–ø—É—Å–∫–µ –∫–∞—Ä—Ç—ã"
        />
      )}
      {cardStatus === 'stamp' && (
        <CardLimit
          value={currentCard.initialStampsOnIssue}
          onChange={(value) => dispatch(updateCurrentCard({ initialStampsOnIssue: value }))}
          title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç–∞–º–ø–æ–≤ –ø—Ä–∏ –≤—ã–ø—É—Å–∫–µ –∫–∞—Ä—Ç—ã"
        />
      )}

      {/* –°—Ç–∞—Ç—É—Å –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã */}
      {(cardStatus === 'discount' || cardStatus === 'cashback') && (
        <>
          <h3 className="barcode-radio-title">–°—Ç–∞—Ç—É—Å –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã</h3>
          <CardStatusForm
            statusFields={statusFields}
            onFieldChange={(index, key, value) =>
              dispatch(updateStatusField({ index, key, value }))
            }
            onAddField={() => dispatch(addStatusField())}
            onRemoveField={(index) => dispatch(removeStatusField(index))}
          />
          <hr />
        </>
      )}

      {/* –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ */}
      <h3 className="barcode-radio-title">–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏</h3>
      <div className="policy-section policy-bordered">
        <div className="policy-bordered-header">
          <h3 className="barcode-radio-subtitle">
            –¢—Ä–µ–±–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–∏—è —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
          </h3>
          <ToggleSwitch
            checked={currentCard.requirePurchaseAmountOnAccrual}
            onChange={() => dispatch(toggleRequirePurchaseAmount())}
          />
        </div>
      </div>

      <button
        onClick={handleSave}
        className="create-button"
        disabled={
          policySettings.policyEnabled &&
          (!policySettings.policyText.trim() || !policySettings.fullPolicyText.trim())
        }
      >
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
      </button>
    </div>
  );

  const cardPreviewContent = (
    <div className="phone-frame">
      <img className="phone-image" src={currentCard.frameUrl} alt={currentCard.name} />
      <div className="phone-screen">
        <CardInfo card={currentCard} />
      </div>
    </div>
  );

  return (
    <div className="edit-type-main-container">
      {isMobile && (
        <div className="edit-type-tabs">
          <button
            className={`edit-type-tab ${activeTab === 'description' ? 'active' : ''}`}
            onClick={() => setActiveTab('description')}
          >
            –û–ø–∏—Å–∞–Ω–∏–µ
          </button>
          <button
            className={`edit-type-tab ${activeTab === 'card' ? 'active' : ''}`}
            onClick={() => setActiveTab('card')}
          >
            –ö–∞—Ä—Ç–∞
          </button>
        </div>
      )}

      <div className="edit-type-layout">
        <div className="edit-type-left">
          {(!isMobile || activeTab === 'description') && (
            <div className="edit-type-page">{settingsContent}</div>
          )}
        </div>
        <div className="edit-type-right">
          {(!isMobile || activeTab === 'card') && cardPreviewContent}
        </div>
      </div>
    </div>
  );
};

export default EditSettings;
